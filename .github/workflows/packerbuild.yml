name: Packer Build Custom Image
 
on:
  pull_request:
   types: [closed]
 
jobs:
  packer_init_validate_build:
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true
    env:
      DATABASE: webappDB
      DATABASE_URL: ${{secrets.DATABASE_URL}}
      DATABASE_USERNAME: ${{secrets.DATABASE_USERNAME}}
      DATABASE_PASSWORD: ${{secrets.DATABASE_PASSWORD}}
      INSTANCE_GROUP_NAME: webapp-igm
      REGION: us-east1
      PROJECT: ${{secrets.PROJECT}}
      INSTANCE_TEMPLATE_NAME: ${{secrets.INSTANCE_TEMPLATE_NAME}}
      MACHINE_TYPE: e2-medium
      NETWORK_TIER: PREMIUM
      SUBNET: webapp
      SERVICE_ACCOUNT: ${{secrets.SERVICE_ACCOUNT}}
      IMAGE: ${{secrets.IMAGE}}
      KMS_VM_KEY: ${{secrets.KMS_VM_KEY}}
      POLICY: MIGRATE
      MODEL: STANDARD
      TAGS: webapp,web,sql,db,allow-health-check
      METADATA: ${{secrets.METADATA}}
      SCOPE: https://www.googleapis.com/auth/cloud-platform
      DEVICE: persistent-disk-0
      TYPE: pd-balanced
    
    steps:
      - name: Checkout code from branch
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
 
      - name: Zip all the webApp files
        run: |
          zip -r webapp.zip ./
          pwd
      - name: check the current
        run: ls -la

      - name: Setup google config
        uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: ${{secrets.GCP_SERVICE_ACCOUNT_CREDENTIALS}}

      - name: Setup MySQL
        uses: mirromutth/mysql-action@v1.1
        with:
          mysql database: 'webappDB'
          mysql user: 'web-app'
          mysql password: '${{ secrets.DATABASE_PASSWORD }}'

      - name: Build with Maven
        run: |
          mvn -B package --file pom.xml

      - name: Setup `packer`
        uses: hashicorp/setup-packer@main
        id: setup
        with:
          version: "latest"
 
      - name: Run `packer init`
        id: init
        run: packer init .

      - name: Packer build
        id: build
        run: packer build main.pkr.hcl

      - name: Create new instance template version
        run: |
          gcloud compute images list  --sort-by=~creationTimestamp --format='value(NAME)' --limit=1
          gcloud compute instance-templates create ${{env.INSTANCE_TEMPLATE_NAME}} --project=${{env.PROJECT}} --machine-type=${{env.MACHINE_TYPE}} --network-interface=network-tier=${{env.NETWORK_TIER}},subnet=${{env.SUBNET}} --instance-template-region=${{env.REGION}} --metadata=startup-script=${{env.METADATA}} --maintenance-policy=${{env.POLICY}} --provisioning-model=${{env.MODEL}} --service-account=${{env.SERVICE_ACCOUNT}} --scopes=${{env.SCOPE}} --region=${{env.REGION}} --tags=${{env.TAGS}} --create-disk=auto-delete=yes,boot=yes,device-name=${{env.DEVICE}},image=${{env.IMAGE}},kms-key=${{env.KMS_VM_KEY}},mode=rw,size=100,type=${{env.TYPE}} --no-shielded-secure-boot --shielded-vtpm --shielded-integrity-monitoring --labels=app=web,environment=dev --reservation-affinity=any

      - name: Configure instance group with new template
        run: |
          gcloud compute instance-groups managed set-instance-template ${{env.INSTANCE_GROUP_NAME}} --region=${{env.REGION}} --template=${{env.INSTANCE_TEMPLATE_NAME}} --project=${{env.PROJECT}}

      - name: Start rolling update
        run: |
          gcloud compute instance-groups managed rolling-action start-update ${{env.INSTANCE_GROUP_NAME}} --version=template="${{env.INSTANCE_TEMPLATE_NAME}}" --max-surge=5 --region=${{env.REGION}} --project=${{env.PROJECT}}

      - name: Monitor instance group update
        run: |
          status="RUNNING"
          while [ "$status" != "True" ]; do
          status=$(gcloud compute instance-groups managed describe ${{env.INSTANCE_GROUP_NAME}}  --region=${{env.REGION}} --project=${{env.PROJECT}} --format="value(status.versionTarget.isReached)")
          sleep 10
          done


  
     
     